
		Sound Driver for FAMICOM/NES [ MCK ] 2003/02/28 version

■コレは何？
　　ファミコン用のサウンドドライバーです。
　　コレを使用すると、ファミコン上で多彩な音が操れるという夢のような代物です。
　　現状ではエミュレーターで楽しむのが一番手近だと思われます。

■インストール・アンインストール
　　圧縮ファイルを展開してもらえれば良いだけです。
　　アンインストールは展開したファイルを消して下さい。
　　なお、レジストリは書き換えませんのでご安心下さい。

■使い方
　　mck単体では残念ながら何も出来ません。6502アセンブラが必要です。
　　MagicKit同梱のNESASM用に作成しておりますので、まずはそちらをご用意下さい。
　　入手先は　http://www.magicengine.com/mkit/jp_dev.html　です。

　　その他有ると便利なツール類が http://nesmusic.zophar.net/ に揃えてあります。
　　そちらも是非ご覧になって下さい。

　　1) ツール類を使って曲データを作成
　　2) mckとNESASMを使用し、各種データー形式（.nes/.nsf/.fds)を出力
　　3) 堪能

　　な流れになります。早速で申し訳ありませんが、詳しい使い方は下記サイトを参考にして下さい。
　　- Make Data - に使い方を記載してあります。　http://nesmusic.zophar.net/
　　このテキストではコマンドの詳細を記していきます。

■お約束など
　　このプログラムに関する問い合わせ、要望、バグ報告などは
　　ココ　http://nesmusic.zophar.net/　の掲示板にお願いします。
　　必ず応え（られ）るワケではありませんが、極力努力はいたします。

　　著作権は放棄できないので持ちますが、転載・改変などは特に制限するつもりはありません。
　　ただし、インターネット以外へのメディアに紹介（そんなことあるのか？）は一報下さい。
　　コレを使用して作成したデータを聴かせて貰えるとウレシイです。ファミコンの音大好き♪
　　上記サイトへのリンク・紹介なども自由です。

　　このプログラム、或いは上記サイトにアップロードされているソフトウェアを使用した
　　いかなる損害・不利益も作者はその責を負いません。必ず自己責任において利用下さい。
　　つーかウィルスチェックしてません。

■各ファイルの説明
　　mck.txt　　　 コレ
　　history.txt　 更新履歴
　　sounddrv.h　　2A03内蔵音源用サウンドドライバ
　　fds.h　　　　 FDS拡張音源用サウンドドライバ
　　n106.h　　　　Namcot106拡張音源用サウンドドライバ
　　freqdata.h　　各種音源用周波数データ

　　songdata.h　　曲データ（ファイル名は任意）
　　effect.h　　　FDS/n106拡張音源用音色、エフェクト処理等の設定データ
　　※）上記2つのファイルはユーザー側で作成します
　　　　詳細を次項で説明します

　　make_nsf.bat　nsf作成用のBAT
　　make_nsf.txt　nsf作成用のデータ（ヘッダー情報はコレを書き換え）
　　make_nes.bat　nes作成用のBAT
　　make_nes.txt　nes作成用のデータ（n106対応の為Mapper19を出力）
　　make_fds.bat　fds作成用のBAT
　　make_fds.txt　fds作成用のデータ（FDS拡張音源まで使用可）
　　fdshdr.bin　　fds作成用のヘッダ
　　fdsboot.bin　 fds作成用のデータ
　　make_nat.bat　実機演奏用データ作成BAT
　　make_nat.txt　実機演奏用データ作成のデータ（N-LINE AT用）

■ファイルの詳細

□effect.h
　　いろいろな設定を行います。設定できる内容は以下の通りです。

　　・ソングデータ		後述するsongdata.hを登録
　　・デューティエンベロープ	内蔵音源(パルス波x2)のデューティ比切替設定（1/60sec単位）
　　・ソフトウェアエンベロープ	音量コントロール（1/60sec単位）
　　・ピッチエンベロープ	周波数コントロール（1/60sec単位）
　　・ノートエンベロープ	音階コントロール（1/60sec単位）
　　・ソフトウェアLFO		LFO設定（ディレイ、スピード、デプス）
　　・各種ウェーブデータ	各種音源用波形データ（FDS/n106）
　　・DPCMデータマッピング	DPCMデータを音階データにマッピング
　　・DPCM用データ登録		DPCM用データ登録
　　・ハードウェアエンベロープ	FDS音源用ハードウェアエフェクト
　　・利用チャンネル数設定	n106音源専用利用チャンネル数登録

　　エンベロープって何よ？
	昔はエンベロープと言えば、音量変化の度合いを指していた
	mckではなんちゃらエンベロープとつけば、なんちゃらが変化する度合いを意味することとする
	いや、どーでもいーんですけど
　周波数って何よ？
	１秒間に振動する回数。440Hzなら１秒間に440回振動するということ
	大概はこの440Hz(=o4a)を基準としていることが多い
	って皆さんご存じですね

　◆ソングデータ
	実際の演奏データを納めたファイルを登録
	ファイル名にはハイフンを使用しないで下さい。NESASMの仕様故です

	書式
	.include	"songdata.h"

　◆デューティエンベロープ
	ファミコン内蔵音源のパルス波x2chのデューティ比を1/60単位で切替
	デューティ比って何？．．．音色と理解頂いて結構です

	正確には波形の上下の比率を指します
	まぁ実際に聞いてみて下さい

	 |<- n2 ->|
	 |        |
	 +--------+        +--------+
	 |        |        |        |
	 |        |        |        |
	-+        +--------+        +--------+
         |                 |
	 |<------ n1 ----->|

	上記図はファミコンの矩形波です
	この n2/n1 がデューティ比、或いはデューティサイクルと言います
	ファミコンはココの比率が4段階に変えられるのですね
	優秀ですね

	ちなみに50%を矩形波と呼び、その他の比率はパルス波と呼ぶそうです
	さらに、この比率を連続で変化させることをPWM（Pulse Width Modula
	tion）と言いうそうです
	どーでもいーですね

	127個まで設定可

	書式
	--------------------------------------------------------------
	dutyenve_table:
		dw	dutyenve_0,dutyenve_1
	dutyenve_lp_table:
		dw	dutyenve_lp_0,dutyenve_lp_1

	dutyenve_0:
		db	データ値,データ値．．．
	dutyenve_lp_0:
		db	データ値．．．,$ff
	dutyenve_1:
	dutyenve_lp_1:
		db	データ値．．．,$ff
	--------------------------------------------------------------
	データ値．．．3,7,11,15の値を書き込んで下さい
	それぞれ
	　　　 3 - 12.5%
	　　　 7 - 25.0%
	　　　11 - 50.0%
	　　　15 - 75.0%
	のデューティ比が鳴ります
	1つのデータで1/60sec分発音します
	$ffはデータの最後を示します
	これ以降は”dutyenve_lp_?:”に戻ります

	例）
	--------------------------------------------------------------
	dutyenve_0:
		db	$03,$07,$0b
	dutyenve_lp_0:
		db	$0f,$ff
	--------------------------------------------------------------
	だと、
	12.5が１フレ 25が１フレ 50が１フレ 75が後ズット鳴ります

　　◆ソフトウェアエンベロープ
	ソフトウェアボリュームエンベロープと言った方が分かり易いような気もします
	スラングとは違うと思いますので、恐らく慣例ってヤツですね
	で、これは音量を1/60sec単位で切り替える機能です
	PSGな音源達はコレの使い方が超ゥ〜重要です
	127個まで設定可

	書式
	--------------------------------------------------------------
	softenve_table:
		dw	softenve_0,softenve_1
	softenve_lp_table:
		dw	softenve_lp_0,softenve_lp_1
	softenve_0:
		db	データ値,データ値．．．
	softenve_lp_0:
		db	データ値．．．,$ff
	softenve_1:
	softenve_lp_1:
		db	データ値．．．,$ff
	--------------------------------------------------------------
	基本的な書き方はデューティエンベロープと一緒です
	データ値は絶対値です

	2A03内蔵音源　−　0-15(00h-0fh)
	FDS拡張音源　 −　0-63(00h-3fh)※33(21h)以上は指定しても無意味です
	n106拡張音源　−　0-15(00h-0fh)

	$ffはデータの最後を示します
	これ以降は”softenve_lp_?:”に戻ります

	例）
	--------------------------------------------------------------
	softenve_0:
		db	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0a,$09,$08,$07
	softenve_lp_0:
		db	$06,$ff
	--------------------------------------------------------------
	だと

	Volume

	F_ |
	   |
	   |
	   |
	   |                      _
	A_ |                    _| |_
	   |                  _|     |_
	   |                _|         |_
	   |              _|             |_
	   |            _|                 |__________...
	5_ |          _|
	   |        _|
	   |      _|
	   |    _|
	1_ |  _|
	   |_|___________________________________________
							fps
 	   0 1 2 3 4 5 6 7 8 9 A B C D E F 10 11 ...

	こんな感じになってくれると良いなぁ

　　◆ピッチエンベロープ
	周波数を1/60sec単位で操ろうという代物です
	ピッチベンド、ポルタメント、LFO、チョーキングに大活躍してくれる気がします
	ていうかコレで代用して下さい
	でも本来のピッチとはだいぶ違う値設定なので申し訳ない気持ちで一杯です
	127個設定可

	書式
	--------------------------------------------------------------
	pitchenve_table:
		dw	pitchenve_0,pitchenve_1
	pitchenve_lp_table:
		dw	pitchenve_lp_0,pitchenve_lp_1
	pitchenve_0:
	pitchenve_lp_0:
		db	$00,$82,$00,$82,$00,$02,$00,$02,$ff
	pitchenve_1:
		db	$10,$84,$84,$84,$84
	pitchenve_lp_1:
		db	$00,$ff
	--------------------------------------------------------------
	データ値は
		  1-127(01h-7fh)がプラス
		129-254(81h-feh)がマイナス
	で相対値指定になります

	n106の周波数設定値が18bitも有り	急激な音の変化には
	この設定値だけでは足りなくなったかも知れません

	プラスマイナスと有りますが、音源によって作用が変わってきます

	内蔵音源　ピッチデータ＋　→　周波数ダウン
		　ピッチデータ−　→　周波数アップ
	FDS&n106　ピッチデータ＋　→　周波数アップ
		　ピッチデータ−　→　周波数ダウン

	なので気を付けて下さい
	$ffはデータの最後を示します
	これ以降は”pitchenve_lp_?:”に戻ります。

	例）
	--------------------------------------------------------------
	pitchenve_0:
		db	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
		db	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$81
	pitchenve_lp_0:
		db	$00,$00,$01,$01,$00,$00,$81,$81,$ff
	--------------------------------------------------------------
	だと

	Frequency DATA（注・再生周波数ではない）

	+5_ |
	    |
	    |
	    |                                ________
	    |                               |        |
	 0_ |-------------------+        +--+        +--+
	    |                   |________|              |
	    |                   ↑　　　　　　　　　　　↓
	    |　　　　　　　　　　ココに戻る　　←　　←　この次は
	    |
	-5_ |_____________________________________________
							fps
 	   0 1 ...  10 11 12 13 14 15 16 17 18 19 1A 1B 1C ...

		コレでもビブラート表現できますな
		てかこの図はなんだ？

　　◆ノートエンベロープ
	高速アルペジオのコトです。ノートエンベロープってイカスネーミングですね
	PSG以外ではあまり聞かないこの言葉、アルペジオを高速(1/60sec)に行うというまんまな機能です
	アルペジオって何？は和音と押さえて貰えればイイ感じがします
	127個まで設定可

	書式
	--------------------------------------------------------------
	arpeggio_table:
		dw	arpeggio_0,arpeggio_1,arpeggio_2,arpeggio_3
	arpeggio_lp_table
		dw	arpeggio_lp_0,arpeggio_lp_1,arpeggio_lp_2,arpeggio_lp_3
	arpeggio_0:
		db	データ値,データ値．．．
	arpeggio_lp_0:
		db	データ値．．．,$ff
	arpeggio_1:
	arpeggio_lp_1:
		db	データ値．．．,$ff
	--------------------------------------------------------------
	他のエンベロープと同様の記述の仕方です
	データ値は
		  1-127(01h-7fh)がプラス
		129-254(81h-feh)がマイナス
	で相対値指定になります
	ですので+1を指定すると、今鳴ってる音より１つ上の音が鳴ります
	　同様に-1を指定すると、今鳴ってる音より１つ下の音が鳴ります

	$ffはデータの最後を示します
	これ以降は”arpeggio_lp_?:”に戻ります

	例）
	--------------------------------------------------------------
	arpeggio_0:
		db	$00
	arpeggio_lp_0:
		db	$01,$81,$81,$01,$ff
	--------------------------------------------------------------
	だと（元の音がcだったバーイ）

	c,d-,c,b,c,d-,c,b,．．．と繰り返し1/60秒ごとに鳴ります

　　◆ソフトウェアLFOデータ
	Low Frequency Oscillatorの略で元々は低周波発振器のコトを指します
	シンセサイザーはLFOを通してビブラートやトレモロを表現していたワケですが、
	mckでのこの機能自体はディレイビブラートと言っても差し支えないような気もします
	LFOと呼ぶのは慣例ってヤツでしょうか？あまり詳しくないのが残念なところです
	演歌におけるコブシと理解して頂ければコレ幸いです
	64個まで登録可能

	書式
	--------------------------------------------------------------
	lfo_data:
		db	ディレイ,スピード,デプス,スピード半分までの時間
	--------------------------------------------------------------
	何やら専門用語ですが以下に解説

	ディレイ　LFO効果を開始するまでの時間（フレーム単位）
	スピード　まんま、LFOのスピード　X軸で、1/4周期のフレーム数指定
	デプス　　ビブラートの深さ　Y軸で、ピーク指定ですか 割り切れる数字が良さそうです

	スピード半分までの時間	デプスをそのままにスピードを半分にします　時間と共に変化してい
				く雰囲気が味わえるかなと思いつつ、まだ実装してなかったりします
				理屈は簡単なんだけどさ、な〜んかうまくいかね〜のよ、コレが

          |<- Speed ->|
        --+       +---+
        D         |   |
	e     +---+   +---+
	p     |           |
	t +---+           +---+                           +
	h |                   |                           |
        --+-------------------+---+-------------------+---+
          0                       |                   |
                                  +---+           +---+
                                      |           |
                                      +---+   +---+
                                          |   |
                                          +---+

	え〜としつこいですが、LFOと呼ぶので有れば
	・ソフトウェアエンベロープ機能（トレモロ）
	・ソフトウェアLFO機能（ビブラート）
	の二つを指してソフトウェアLFOと呼ぶ方が良いような気がします
	無知なので間違ってる気もします
	是非突っ込んで下さい

　　◆FDS音色データー
	FDSというのは非常に面白い音源でして、波形メモリをベースにFM（周波数）変調させます
	ところが、mckでは周波数変調の部分を作り間違えてしまったため、波形メモリセットしか
	意味をなしてません　非常にごめんなさいです　あまり詳しくないの．．．
	解釈を間違えていたら、容赦なく突っこんで下さい　お願いします

	で、その波形メモリ部ですが20hをゼロとした波形（64bytes)をセットしていきます。
	128個まで置けそうです

	書式
	--------------------------------------------------------------
	fds_data_table:
		dw	fds_data_000
	fds_data_000:
		db	データ値,　x64個
	--------------------------------------------------------------
	データ値は0-63(00h-3fh)までです

	例）
	--------------------------------------------------------------
	fds_data_000:
		db	$00,$00,$01,$03,$06,$09,$0d,$14,$19,$21,$25,$2d,$31,$35,$38,$3a
		db	$3c,$3d,$3d,$3e,$3d,$3d,$3b,$3a,$38,$35,$33,$32,$2e,$2d,$2b,$2b
		db	$2b,$2b,$2b,$2d,$2e,$32,$33,$35,$38,$3a,$3b,$3d,$3d,$3e,$3d,$3d
		db	$3c,$3a,$38,$35,$31,$2d,$25,$21,$19,$14,$0d,$09,$06,$03,$01,$00
	--------------------------------------------------------------
	なら

      3f|
	|                   ++                        ++
	|                 +-++-+                    +-++-+
	|                ++    |                    |    ++
	|                |     ++                  ++     |
      3a|               ++      ++                ++      ++
	|               |        |                |        |
	|              ++        ++              ++        ++
	|              |          |              |          |
	|              |          |              |          |
	|             ++          ++            ++          ++
	|             |            |            |            |
	|             |            ++          ++            |
	|             |             ++        ++             |
	|            ++              |        |              ++
      30|            |               |        |               |
	|            |               ++      ++               |
	|            |                ++    ++                |
	|           ++                 |    |                 ++
	|           |                  +----+                  |
	|           |                                          |
      2a|           |                                          |
	|           |                                          |
	|           |                                          |
	|           |                                          |
	|           |                                          |
	|          ++                                          ++
	|          |                                            |
	|          |                                            |
	|          |                                            |
	|         ++                                            ++
      20|         |                                              |
	|         |                                              |
	|         |                                              |
	|         |                                              |
	|         |                                              |
	|         |                                              |
      1a|         |                                              |
	|        ++                                              ++
	|        |                                                |
	|        |                                                |
	|        |                                                |
	|        |                                                |
	|       ++                                                ++
	|       |                                                  |
	|       |                                                  |
	|       |                                                  |
      10|       |                                                  |
	|       |                                                  |
	|       |                                                  |
	|      ++                                                  ++
	|      |                                                    |
	|      |                                                    |
       a|      |                                                    |
	|     ++                                                    ++
	|     |                                                      |
	|     |                                                      |
	|    ++                                                      ++
	|    |                                                        |
	|    |                                                        |
	|   ++                                                        ++
	|   |                                                          |
	|  ++                                                          ++
	+--+------------------------------------------------------------+
	          a    10        1a    20        2a    30        3a    3f
	と言う波形になります
	何ですか？コレ　フォントを横長に出来るワープロで見るべし
	実際にはこの理論値は出なくて、少々ずれるらしいですが
	てか表がズれた

　　◆FDSハードウェアエフェクトデーター
	え〜実装コレで良いんでしょうか？
	よく分かってなくてスイマセン．．．
	とりあえず分かる人だけ使って下さい

	エフェクトは16個まで登録可
	$4088の波形は8個まで登録可

	書式
	--------------------------------------------------------------
	fds_effect_select:
		db	ディレイ,レジスタ,データ値,…,$ff
	fds_4088_data:
		db	波形データ値,x32
	--------------------------------------------------------------
	・ディレイ	エフェクト開始までの時間（フレーム単位）
	・レジスタ	レジスタは$4084-$4088までの指定で、アドレスlowのみの指定となります
	・データ値	上記レジスタに書き込む値です　詳しくは下記資料を
			$4088は特殊で、fds_4088_dataの何個目の波形を使うかの指定となります

			fds_effect_selectは全部で16bytesになるように
			データの最後は$ffで締めて下さい　それ以降はダミーデータとなります

		$4084	モード設定

			 +--------- 1: 直接データ指定モード
			 | ++++++-- データ値
			 |x||||||
			%00000000
			 ||||||||
			 ||++++++-- エンベロープ速度値
			 |+-------- 0: エンベロープ減少モード　1: エンベロープ増加モード
			 +--------- 0: エンベロープモード

		$4085	波形合成初期値	+32 から -32 まで

			%x0000000
			  |||||||
			  |++++++-- 波形初期値0-32(00h-20h)まで
			  +-------- 正負フラグ（ココが立つとbit0-5の値がそのまま負となる）

			符号付7bit（2の補数表現）とか言うヤツでしょうか
			微分積分もやったことがない高卒にはその辺の数学的理屈は理解しかねます

		$4086	サブ側周波数設定　ここの8bitと
		$4087	ここの下位4bitの計12bitで周波数を算出
			$4082,$4083の仕組みと一緒です　詳しくはfreqdata.hを参照下さい

			ちなみに$4088のbit7は$4088書き込みフラグです
			$4088に波形を書き込む際は、必ず$4087に80hを書き込んで下さい
			その後bit7にゼロを書き込んで閉じておくことも忘れずに

	・波形データ値	$4088に書き込む値を指定します　全部で32bytesになるように
			ココで$4085でセットした数値から加減算を行います
			その場合、$4085の最大（少）値を超えないように注意して下さい

		$4088	波形データ値	 3  2  1 0  7  6  5  4
			加減算値	+4 +2 +1 0 -1 -2 -4 $4085にゼロをセット

			$4088の波形は32bytesですが、FDSの波形周期は64bytesですので、
			実際には$4088の加減算が2回ずつ行われるコトとなります
	例）ビブラート
	--------------------------------------------------------------
	fds_effect_select:
		db	$20,$84,$82,85,$00,$87,$80,$88,$01,$86,$10,$87,$00,$ff,$00,$00
	fds_4088_data:
		db	$07,$07,$07,$07,$01,$01,$01,$01
		db	$01,$01,$01,$01,$07,$07,$07,$07
		db	$07,$07,$07,$07,$01,$01,$01,$01
		db	$01,$01,$01,$01,$07,$07,$07,$07
	--------------------------------------------------------------

　　◆DPCM用データーマッピング
	これもファミコン独特の音源ΔPCM
	ローファイな音を楽しんで下さい
	64個まで置けます

	書式
	--------------------------------------------------------------
	dpcmdata:
		db	再生モード,波形初期値,アドレス,再生時間
	--------------------------------------------------------------
	さて、いろいろありますが、１つずつ解説をば

	・再生モード
		ぶっちゃけレジスタ$4010に書き込む内容です
		DPCMの再生方式と再生周波数の指定。
		必要だと思われるのは下位4bitです　てか上位4bitは弄らないでください

		下位4bitの内容は以下の通りです

		data	clocks  octave  scale
		-------	------  ------  -----
		F	1B0	8	C
		E	240	7	G
		D	2A0	7	E
		C	350	7	C
		B	400	6	A
		A	470	6	G
		9	500	6	F
		8	5F0	6	D
		7	6B0	6	C
		6	710	5	B
		5	7F0	5	A
		4	8F0	5	G
		3	A00	5	F
		2	AA0	5	E
		1	BE0	5	D
		0	D60	5	C

		数値が少なくなると再生速度が遅くなると覚えとく位でよさそうです。
		音階が変化するのは使えそうです。
		ま、0fh指定しておけば普通に使う分には何ら問題有りません

	・波形初期値
		ぶっちゃけレジスタ$4011に書き込む値です
		DPCMの波形状態の直接指定になります
		00hでいいんじゃない？とか、40hが妥当という説もあり
		ノイズが乗らない程度に設定しておいて下さい

		実はここを弄ると三角波のボリュームが変わるらしいバグがあるようです
		そこまで再現しているエミュレーター＆実機で使えそうなテクです

		ちなみに
		ΔPCMのデータ値のbit0は未使用というかスルーです
		てことはbit1-6の6bitで波形を上下させますので
		ソフトウェア上では+-1ずつですが、ハード上では+-2ずつで動くことに

	・アドレス
		ぶっちゃけレジスタ$4012に書き込む値です
		DPCMデータのアドレス指定になります
		実際のアドレスは（ アドレス * 64 + 0C000h ）です
		例えばスネアを$E000から置いたとすると、ココの値は　80h　となります
		音声なんか（別に何でもイーんだけど）を再生させる場合、
		ココを変えることによって、途中から再生させることも出来ますね

		$FFFFを越えた場合は$C000に戻る説と$8000に戻る説の二つがあります
		どっちなんでしょうね。実機で試したいトコです。一発で判るのに．．．	
		$C000に戻りそうな気がしないでもない今日この頃だったりします

	・再生時間
		ぶっちゃけレジスタ$4013に書き込む値です
		DPCMデータ再生時間指定になります
		正確に言うとファイルのドコまでを再生するかの指定ですかね
		指定はデータ量単位で ( 再生時間 * 16 ) です

	これらは下記DPCMデータ配置と対で行われます

　　◆DPCM用データ登録
	DPCMのお約束で、$C000からしか置けません
	使わない場合は全部REMして貰えれば大丈夫です
	この設定は「必ず」最後に記述してください
	そーしないとおかしな事になります
	厳密には最後に置かなくてもいーんですけど

	書式
	--------------------------------------------------------------
	.bank	2
	.org	アドレス
	.incbin	ファイル名
	--------------------------------------------------------------
	・アドレス
		必ず$C000以降を指定して下さい
		あとはファイルサイズ毎に指定して下さい
	・ファイル名
		例によってハイフンは使わないで下さい

	DPCM用データはNorixさん作成のDMCconverterを利用すると良い具合に作成できるでしょう

　　◆利用チャンネル数登録
	ナムコカスタム音源があります
	コイツは1ch-8chまで利用できるチャンネル数を可変できるという特徴があります
	ところが、freq.hをご覧になって頂ければ分かるのですが、
	利用チャンネル数により再生周波数が変わってきます
	さらに波形メモリに利用できるメモリ領域も変化して参ります
	まぁでも8ch利用が普通ではないかと思われます

	書式
	--------------------------------------------------------------
	n106_channel:
		db	利用チャンネル数
	--------------------------------------------------------------
	利用チャンネル数は1-8までです
	それ以外の数値は入力しないで下さい
	ちなみに標準は4です

	このデータは必ず用意して下さい
	でないと少々おかしなコトになります

　　◆n106波形メモリ登録
	俗に言うナムコPSGとはまた違ったナムコカスタム音源
	是非その手でじっくり堪能して下さい
	高音域にデチューンかましてやるととんでもないイイ音が出ます
	最高です

	書式
	--------------------------------------------------------------
	n106_wave_init:
		db	波形データ長,オフセットアドレス
	n106_wave_table:
		dw	n106_wave_000
	n106_wave_000:
		db	波形データ

	--------------------------------------------------------------
	上記でワンセットの音色になります
	波形データは4bitずつの指定となります
	そして少々複雑です　早速解説をば

	・波形データ長
		波形周期のデータ長を指定します　それぞれ
		0　→　16bytes（波形データ32個）
		1　→　14bytes（波形データ28個）
		2　→　12bytes（波形データ24個）
		3　→　10bytes（波形データ20個）
		4　→　 8bytes（波形データ16個）
		5　→　 6bytes（波形データ12個）
		6　→　 4bytes（波形データ 8個）
		7　→　 2bytes（波形データ 4個）

		となります

	・オフセットアドレス
		mapper19拡張メモリ($00-$7f)内のドコに書き込むかです
		ココのbit0は後述の波形データの上位4bitか下位4bit
		どちらから読み込むのかのフラグになりますので
		拡張メモリ内の$10に置くのであれば20h、$30に置くので
		あれば60hを指定して下さい　bit0はゼロで構いません

		注意すべきは使用チャンネル数によって空きメモリが変わるという点です
		使用チャンネルにより$7fから8bytesずつ消費されます
		8ch使うので有れば、$7fから64bytes使いますので、ウェーブ
		データを置けるのは$00-$3fまでということになります
		8ch使用時に同時に8つの音色は扱えません

		重ならないよう気を付けてセットして下さい
		切り替えればいい話ですが

	・波形データ
		1byteずつ指定ですが、波形は4bitずつの読みとりとなりますので
		1byteで2つの波形データとなります
		更に言うと下位4bitから読みとりますので順番に気を付けて下さい
		波形データ長で指定した数だけ置いて下さい
		4bit単位なので、１サンプルは0-15(00h-0fh)までですね
	例）
	--------------------------------------------------------------
	n106_wave_init:
		db	$00,$00
	n106_wave_table:
		dw	n106_wave_000
	n106_wave_000:
		db	$10,$32,$54,$76,$98,$ba,$dc,$fe,$de,$bc,$9a,$78,$56,$34,$12,$00
	--------------------------------------------------------------
	だと
	拡張メモリ内の$00から16bytesデータを置いて、波形は以下な感じ

	       f|              ++
		|             ++++
		|            ++  ++
		|           ++    ++
		|          ++      ++
	       a|         ++        ++
		|        ++          ++
		|       ++            ++
		|      ++              ++
		|     ++                ++
		|    ++                  ++
		|   ++                    ++
		|  ++                      ++
		| ++                        ++
		|++                          ++
		++----------------------------+-
		0         a    10        1a    1f

		イイ音色が出来たら是非教えて下さい〜


□songdata.h
　　演奏データ（コマンド）を置いていきます

　　書式
　　--------------------------------------------------------------
　　sound_data_table:
	dw	songdata_0,以下チャンネル数続く．．．
　　loop_point_table:
	dw	songdata_0_lp,以下チャンネル数続く．．．
　　songdata_0:
	db	コマンド，データ値,…
　　songdata_0_lp:
	db	コマンド,データ値,…,$ff
　　以下チャンネル数続く．．．
　　--------------------------------------------------------------
　　$ffがデータの終端となります
　　その後songdata_?_lp:に戻ります

　　以下に各コマンド・データ値の詳細をつづります

	◆$ff
	データ終端指定
		前述したとおりデータ終端を表します
		ループしたくない場合は最後を休符に
		してそこにループするようにして下さい

	◆$fe,データ値
	音色指定　以下データ値の詳細
		◇2A03内蔵音源
		 +--------- 1: 通常音色指定
		 |   ++++-- 音色指定($00-$0f)
		 |xxx||||
		%00000000
		 ||||||||
		 |+++++++-- デューティエンベロープセレクト($00-$7f)
		 +--------- 0: デューティエンベロープ指定

		bit7がon の時、音色指定となります
		bit2-3で音色（デューティ比）選択
		ソフトウェアエンベロープを有効にしたい場合は
		bit0-1のbitを立ててください

		bit7がoffの時、デューティエンベロープ指定となります
		effect.h内で登録したエンベロープを使用します

		ちなみに三角波には音色選択がありません
		$8fを書き込んでおいて下さい

		◇FDS拡張音源　＆　n106拡張音源
		effect.h内に記述した音色選択となります
		値は$00-$7fまでの128個となります

	◆$fd,データ値
	音量指定　以下データ値の詳細
		◇2A03内蔵音源　＆　n106拡張音源
		 +--------- 1: 通常ボリューム指定
		 |   ++++-- ボリューム指定（$00-$0f）
		 |xxx||||
		%00000000
		 ||||||||
		 |+++++++-- ソフトウェアエンベロープセレクト（$00-$7f）
		 +--------- 0: ソフトウェアエンベロープ指定

		bit7がon の時、ボリューム指定となります
		bit7がoffの時、ソフトウェアエンベロープ指定となります
		effect.h内で登録したエンベロープを使用します

		◇FDS拡張音源
		 +--------- 1: 通常ボリューム指定
		 |+-------- 0: 音量指定　1: ソフトウェアエンベロープ指定
		 ||++++++-- ボリューム指定 or ソフトウェアエンベロープセレクト(00h-3fh)
		 ||||||||
		%00000000
		 ||||||||
		 ||++++++-- ハードウェアエンベロープ速度($00 slow <--> $3f fast)
		 |+-------- 1: Fade-in　0: Fade-out
		 +--------- 0: ハードウェアエンベロープ指定

		少々複雑にしてしまいました
		それよりも、ハードウェアエンベロープはADSRを表現できるように
		仕組みを変えた方がよいですね
		現状では使い物になりません

	◆$fc,データ値
	休符指定
		データ値は休符の時間です
		単位はフレーム数です
		ffh(4.25sec)より長い時間休符にしたければ、
		後述するwaitコマンドを使って下さい
		値は1-255(01h-ffh)です

		ゼロを指定すると256フレームとなってしまいます

	◆$fb,データ値
	ソフトウェアLFO指定
		データ値は、effect.h内に記述したLFOデータの
		何番目を使うか？です
		値は0-63(00h-3fh)までですね
		登録は64個まで可能ですが、同時に使用出来るのは
		「一個」です　複数同時使用の方が良さそうでしょうか？

		ffhを指定するとそれ以降ソフトウェアLFOを無効にします

	◆$fa,データ値
	デチューン指定
		設定された周波数より、データ値分だけピッチ（周波数）をずらす
		1chだけでは効果を発揮しません　同じ音をもう1chで鳴らし、
		このコマンドでズラしてやることにより、音に大変厚みが出ます
		以下詳細を記します

		  1-127(01-7fh)までが　＋　にずらします
		129-254(81-feh)までが　−　にずらします

		ffhを置くと、それ以降detune無効指定となります

		扱う数値ですが、2A03内蔵音源　→　数値が高くなると音程は下がる
				FDS&n106　　　→　数値が高くなると音程は上がる
		となります
		これは、音源ごとの再生周波数算出方式が違うせいです
		興味のある方はfreqdata.hを参照してみてください
		あと、n106に限り、
			デチューン指定値　ｘ　オクターブ
		が実際の書き込む値となります。そこそこ比例するのではないでしょうか
		てかピッチベンドもコレにした方が良さそうです


	◆$f9,データ値
	ハードウェアスウィープ指定
		2A03内蔵音源がハードウェアで持っているスウィープ機能を使用します
		矩形波2ch専用のコマンドになります
		以下データ値の詳細を記します

		%00000000
		 ||||||||
		 |||||+++- 右シフト量
		 ||||+---- 波形長の減衰・増加
		 |+++----- スウィープ更新速度
		 +-------- スウィープフラグ

		まんま直データなので、無効にする場合は$80未満を書き込めばOK
		そうそう、矩形波1と2では掛かり具合に差があります
		詳しくはどこぞの資料でも

	◆$f8,データ値
	ピッチエンベロープ指定
		データ値は、effect.h内に記述したピッチ
		エンベロープデータの何番目を使うか？です
		値は0-127(00h-7fh)までですね

		ffhが書き込まれたらピッチエンベロープをそれ以降無効にします

	◆$f7,データ値
	ノートエンベロープ指定
		データ値は、effect.h内に記述したノート
		エンベロープデータの何番目を使うか？です
		値は0-127(00h-7fh)までですね

		ffhが書き込まれたらノートエンベロープをそれ以降無効にします
		ソフトウェアエンベロープと併用するのがイイでしょう

	◆$f6,アドレスlow,アドレスhigh,再生時間
	再生周波数直接指定
		再生周波数を直接指定する2A03内蔵音源専用コマンドです
		ところが今や意味が無くなってしまい．．．FDS&n106では使えないし

		・アドレスLOW 　→　再生周波数用データの下位8bit
		・アドレスHigh　→　再生周波数用データの上位3bit
		・再生時間　　　→　再生時間（フレーム単位）

	◆$f5,アドレスlow,アドレスhigh,データ値
	メモリ直接書き込み指定
		ファミコンのメモリに直接書き込み（write)します
		まぁ意味が分からない人は使ってはいけません
		と〜ってもデンジャラスです

		・アドレスlow 　→　書き込むアドレスの下位8bit
		・アドレスhigh　→　書き込むアドレスの上位8bit
		・データ値　　　→　書き込むデータ

		ゲームなんかで曲と同期取るときに使えるコマンドですか．．．？

	◆$f4,データ値
	ウェイト設定
		現状をデータ値（フレーム単位）で維持します
		音の途中でエフェクト入れる際にコレを有効活用して頂く
		な〜んて使い方がイイかもです

	◆$f3,データ値
	FDS拡張音源用ハードウェアエフェクト指定
		データ値は、effect.h内に記述したハードウェアエフェクト
		データの何番目を使うか？です　FDS拡張音源専用
		値は0-127(00h-7fh)までですね
		
		ffhを指定するとそれ以降ハードウェアエフェクトは無効となります

	◆$a1,ループ抜け先アドレス
	リピート分岐指定
		後述するリピート指定で途中から抜けさせる場合に使います
		最後の１ループ時にループ抜け先アドレスへ飛びます

		・ループ抜け先アドレス　2bytes指定
					実際はラベル指定する形になります
					詳細は次項で

	◆$a0,ループ回数,ループ先アドレス
	リピート指定
		曲データ中重複する箇所はコレを使いループさせることが出来ます

		・ループ回数　→　まんまループさせる回数です
				　値は0-255(00h-ffh)まで
				　指定した値の回数分ループ先アドレスに飛びます

		　　　　　　　　　ゼロは無限ループとなります　が
				　階層化がまだ出来ないので実際に
				　指定することはないと思われます

		・ループ先アドレス　→　ループで戻る先のアドレス指定

	例）	songdata.h内で
	--------------------------------------------------------------
	loop_start:
		db	$42,$20
		db	$44,$20

		db	$a1		;分岐コマンド
		dw	loop_end	;最後のループならloop_endへ

		db	$45,$20
		db	$47,$20

		db	$a0,$03		;ループコマンド
		dw	loop_start	;ループ回数が残っているならloop_startへ
	loop_end:
		db	$49,$20
		db	$4a,$20
	--------------------------------------------------------------
	ラベル名は他のラベルと重複しなければ何でもイイです

	上記はMMLにすると　”[ de | fg ]3 ab”　に相当しま


	◆$00-$8f,再生時間
	音階／音長指定
		実際に鳴らす音データです
		音階、音の長さの順に並びます

		・音階
		%00000000
		 ||||||||
		 ||||++++- 音階0-15($0-$f)で指定　下図参照
		 ++++----- オクターブ0-8($0-$8) 音源によって利用できるオクターブが変わってきます
						詳しくはfreqdata.hを参照下さい

		data	l 0 l  1 l 2 l 3 l 4 l 5 l 6 l 7 l 8 l 9 l A l B l C l D l E l F l
		MML(?)	l c l  d-l d l e-l e l f l g-l g l a-l a l b-l b l   l a l b-l b l

		です。
		DEFのab-bは何かというと１オクターブ低いのです。
		ナゼこんなコトしてるかは聞かないでください。説明すると長くなるので．．．
		一番低い音階はココを指定しないと鳴りません。ご注意を（手抜きでスマン
		
		ちなみにノイズパートも同じ指定の仕方ですが、再生周波数は各自が
		いじって確かめていただくのがよいでしょう。

		・音長
		音の長さはフレーム単位です　1/60（NTSC)
		自分で計算して書き込んでください。慣れると苦じゃないです（ぉ
		連符も計算してください。この辺はMMLコンバータ任せで行こうと
		オレじゃ作れませんが、ええ

		T=120　→　１分間に4分音符120個 = 4分音符は0.5sec = 30/60fps = $1e
			1/1 = 2.0     =120.00/60	= $78
			1/2 = 1.0     = 60.00/60	= $3C
			1/4 = 0.5 sec = 30.00/60 fream	= $1E
			1/8 = 0.25    = 15.00/60	= $0F
			1/16= 0.125   =  7.50/60	= $07 注
			1/32= 0.0625  =  3.75/60	= $03 注
		 注）端数のモノは帳尻を合わせるように

		現状だと$ff(4.25sec)以上の音を鳴らせない計算になります　仕様です
		ウェイトコマンド($f4)使って繋げて下さい

	□拡張音源フラグ（NSFonly）
		拡張音源の使用宣言

	SOUND_GENERATOR	equ	データ値
		
	データ値
	db	#%00000000
                    ||||||
                    |||||+---------- VRC6
                    ||||+----------- VRC7
                    |||+------------ FDS
                    ||+------------- MMC5
                    |+-------------- Namcot106
                    +--------------- FME-07

	現状はFDSとn106の選択肢しか有りません

■補足
　　・再生時間はフレームで指定するわけですが、ゼロは指定しないでください
　　　なぜならゼロから1を引くと255になるからです

　　・ノイズはオクターブの概念はありません。必ず$00-$0fの指定で願います

　　・DPCMは”何個目($00-$3f)のデータを鳴らすか”な指定となります
　　　もちろんオクターブの概念はありません　マッピングするわけですが
　　　o2での使用となります

　　・DPCMは変なコマンド置くと止まります　気を付けて下さい
	ループ　　指定( $ff )は　イケます
	音色　　　指定( $fe )はイケません　てか置かないでください。困ります
	音量　　　指定( $fd )もイケません　てか置かないでください。困ります
	休符　　　指定( $fc )は　イケます
	ＬＦＯ　　指定( $fb )はイケません　てか置かないでください。困ります
	デチューン指定( $fa )もイケません　てか置かないでください。困ります
	スウィープ指定( $f9 )もイケません　てか置かないでください。困ります
	ピッチ　　指定( $f8 )もイケません　てか置かないでください。困ります
	アルペジオ指定( $f7 )もイケません　てか置かないでください。困ります
	再生周波数指定( $f6 )もイケません　てか置かないでください。困ります
	メモリ書込指定( $f5 )もイケません　てか置かないでください。困ります
	ウェイト　指定( $f4 )は　イケます
	ハードLFO 指定( $f3 )はイケません
	分岐判断　指定( $a1 )は　イケます
	リピート　指定( $a0 )は　イケます

　　・データが巨大になってしまい、NESASM使用時にエラーが出る場合
　　　適当なトコで下記命令をsongdata.h内に挿入して下さい
	.bank	1
	.org	$a000

　　・複数曲登録したい場合
	まだできません
	ただ、将来的にもこの辺は手動でする形になります
	effect.hは１種類のみ
	songdata.h内に複数曲を登録
	であればスグできるかもしれません

　　・FDS形式で出力する場合
	DPCM使用するか否かで設定を変えねばなりません
	DPCM使用の場合はそのままで
	使用しない場合はmake_fds.txt内の

	;    .bank 2

	のREMを取り除いて下さい
